#ifndef SIGNALS_H
#define SIGNALS_H

typedef enum _SYSTEM_EVENT_FLAG {

    // ADC backed events
    // Don't re-order
    SENSOR_SERVO_CURRENT = 0,
    SENSOR_VOLTAGE_INPUT,
    SENSOR_TEMPERATURE_PCB,
    SENSOR_TEMPERATURE_REGULATOR,
    SENSOR_TEMPERATURE_EXTERNAL,
    SENSOR_TEMPERATURE_MICRO,
    SENSOR_VOLTAGE_INTERNAL_REF,

    // Input capture backed events
    // Don't re-order
    SENSOR_SERVO_HLFB,
    SENSOR_FAN_SPEED,


    // Servo info
    SERVO_POWER,
    SERVO_POSITION,
    SERVO_SPEED,
    SERVO_STATE,

    // Effector info
    EFFECTOR_POSITION,
    EFFECTOR_SPEED,
    EFFECTOR_NEAR_HOME,

    // Event flags
    FLAG_ARM,
    FLAG_DISARM,
    FLAG_ESTOP,
    FLAG_REHOME,

    FLAG_MODE_REQUEST,


    OVERWATCH_SERVO_ENABLE,
    OVERWATCH_SERVO_DISABLE,

    FLAG_SYNC_EPOCH,

    FLAG_PLANNER_VIOLATION,
    FLAG_EFFECTOR_VIOLATION,

    OVERWATCH_STATE_UPDATE,
    OVERWATCH_MODE_UPDATE,


    SYSTEM_NUM_FIELDS,  // Only marks end of enum range, shouldn't exceed 64 entries
} SYSTEM_EVENT_FLAG;

typedef enum
{
    MODE_UNKNOWN = 0,
    MODE_CHANGE,
    MODE_MANUAL,
    MODE_TRACK,
    MODE_DEMO,
    MODE_EVENT,
} ControlModes_t;

#endif    // SIGNALS_H
